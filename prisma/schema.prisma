// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  company   Company?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Worker {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id        String   @id @default(uuid())
  name      String
  logo      String?
  user      User     @relation(fields: [userEmail], references: [email])
  userEmail String   @unique
  mill      Mill[]
  worker    Worker[]
  client    Client[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mill {
  id        String    @id @default(uuid())
  name      String    @unique
  quality   Quality[]
  company   Company   @relation(fields: [companyId], references: [id])
  companyId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Quality {
  id        String   @id @default(uuid())
  name      String   @unique
  mill      Mill     @relation(fields: [millName], references: [name])
  millName  String
  specs     Specs[]
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Different types of a Single Quality
model Specs {
  id          String   @id @default(uuid())
  quality     Quality  @relation(fields: [qualityName], references: [name])
  qualityName String
  breadth     Float
  length      Float?
  weight      Float
  gsm         Int
  sheets      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  stock       Stock[]

  @@unique([qualityName, breadth, length, weight, gsm, sheets])
}

// Stock Invoice from a Mill
model StockInvoice {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  invoice    String   @unique
  client     Client?  @relation(fields: [clientName], references: [name])
  clientName String?
  stock      Stock[]
}

// Individual Stock Additions of a Single Specication of a Quality
model Stock {
  id          String       @id @default(uuid())
  specs       Specs        @relation(fields: [specsId], references: [id])
  specsId     String
  quantity    Int          @default(0)
  bundle      Int          @default(0)
  transit     Int          @default(0)
  ordered     Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  rate        Float        @default(0)
  order       StockOrder[]
  invoice     StockInvoice @relation(fields: [invoiceName], references: [invoice])
  invoiceName String
}

// Connects a Single Client to a Single Order. Allowing for multiple orders in a single client
model Order {
  id                 String       @id @default(uuid())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  stockOrder         StockOrder[]
  orderId            String       @unique // Order Id entered before the order is placed
  clientName         String
  client             Client       @relation(fields: [clientName], references: [name])
  shippingClientName String
  billingAddress     String
  shippingAddress    String
}

// Connects a Single Order to a Single Stock. Allowing for multiple stocks in a single order
model StockOrder {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  status       String   @default("pending")
  quantity     Int      @default(0)
  rate         Float    @default(0)
  shippingDate DateTime
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      String
  stock        Stock    @relation(fields: [stockId], references: [id])
  stockId      String
  remark       Remark[]
}

// Shows any changes to the final shipped order
model Remark {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  remark       String
  stockorder   StockOrder @relation(fields: [stockorderId], references: [id])
  stockorderId String
}

model Client {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  name         String         @unique
  address      String[]
  mobile       String?
  company      Company        @relation(fields: [companyId], references: [id])
  companyId    String
  email        String?
  gst          String?
  order        Order[]
  stockInvoice StockInvoice[]

  @@unique([name, companyId])
}
